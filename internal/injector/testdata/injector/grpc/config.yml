%YAML 1.1
---
aspects:
  - join-point:
      one-of:
        - function-call: google.golang.org/grpc.Dial
        - function-call: google.golang.org/grpc.DialContext
        - function-call: google.golang.org/grpc.NewClient
    advice:
      - append-args:
          type: google.golang.org/grpc.DialOption
          values:
            - imports: &imports
                grpc: google.golang.org/grpc
                grpctrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/google.golang.org/grpc
              template: grpc.WithStreamInterceptor(grpctrace.StreamClientInterceptor())
            - imports: *imports
              template: grpc.WithUnaryInterceptor(grpctrace.UnaryClientInterceptor())
  - join-point:
      function-call: google.golang.org/grpc.NewServer
    advice:
      - append-args:
          type: google.golang.org/grpc.ServerOption
          values:
            - imports: *imports
              template: grpc.StreamInterceptor(grpctrace.StreamServerInterceptor())
            - imports: *imports
              template: grpc.UnaryInterceptor(grpctrace.UnaryServerInterceptor())

preserveLineInfo: true

syntheticReferences:
  gopkg.in/DataDog/dd-trace-go.v1/contrib/google.golang.org/grpc: true

code: |-
  package test

  import (
    "log"
    "net"

    "google.golang.org/grpc"
  )

  func grpcClient() {
    dialOpts := []grpc.DialOption{grpc.WithInsecure()}
    conn, err := grpc.Dial("localhost:50051", dialOpts...)
    if err != nil {
      log.Fatal(err)
    }
    defer conn.Close()
  }

  func grpcServer() {
    ln, err := net.Listen("tcp", ":50051")
    if err != nil {
      log.Fatal(err)
    }

    s := grpc.NewServer(grpc.EmptyServerOption{})
    if err := s.Serve(ln); err != nil {
      log.Fatalf("failed to serve: %v", err)
    }
  }
