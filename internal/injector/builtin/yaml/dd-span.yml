# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=../../../../docs/static/schema.json
meta:
  name: //dd:span
  description: Monitor a function using a custom span.
  icon: cog
aspects:
  - id: Annotated with `dd:span`
    join-point:
      function-body:
        directive: 'dd:span'
    advice:
      - prepend-statements:
          imports:
            context: context
            tracer: gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer
          template: |-
            {{- $ctx := .Function.ArgumentOfType "context.Context" -}}
            {{- $req := .Function.ArgumentOfType "*net/http.Request" -}}
            {{- if (eq $ctx "") -}}
              {{- $ctx = "ctx" -}}
              ctx := {{- with $req -}}
                {{ $req }}.Context()
              {{- else -}}
                context.TODO()
              {{- end }}
            {{ end -}}

            {{ $functionName := .Function.Name -}}
            {{- $opName := $functionName -}}
            {{- range .DirectiveArgs "dd:span" -}}
              {{- if eq $opName "" -}}
                {{ $opName = .Value }}
              {{- end -}}
              {{- if eq .Key "operation" -}}
                {{- $opName = .Value -}}
                {{- break -}}
              {{- end -}}
            {{- end -}}

            var span tracer.Span
            span, {{ $ctx }} = tracer.StartSpanFromContext({{ $ctx }}, {{ printf "%q" $opName }},
              {{- range .DirectiveArgs "dd:span" }}
                tracer.Tag({{ printf "%q" .Key }}, {{ printf "%q" .Value }}),
              {{- end }}
            )
            {{- with $req }}
              {{ $req }} = {{ $req }}.WithContext({{ $ctx }})
            {{- end }}

            {{ with .Function.ResultOfType "error" -}}
              defer func(){
                span.Finish(tracer.WithError({{ . }}))
              }()
            {{ else -}}
              defer span.Finish()
            {{- end -}}
