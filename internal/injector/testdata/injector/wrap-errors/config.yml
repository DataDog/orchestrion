# Example configuration demonstrating the desired 'wrap-errors' functionality.
# We expect returned errors are wrapped with dd-trace-go/instrumentation/errortrace
# "errors" should also include popular, third-party error libraries

%YAML 1.1
---
aspects:
  - id: "wrap-standard-errors"
    join-point:
      function-body:
        function:
          - result-implements: "error"
    advice:
      - prepend-statements:
          imports:
            errortrace: github.com/DataDog/dd-trace-go/v2/instrumentation/errortrace
            fmt: fmt
          template: |-
            {{ $ret := .Function.LastResultThatImplements "error" }}
            defer func() {
              {{ $ret }} = errortrace.Wrap({{ $ret }})
            }()

syntheticReferences:
  github.com/DataDog/dd-trace-go/v2/instrumentation/errortrace: true

code: |-
  package test

  import (
    "errors"
    "fmt"

    "go.uber.org/multierr"
    goerrors "github.com/go-errors/errors"
    "github.com/joomcode/errorx"
    "github.com/ztrue/tracerr"
    "braces.dev/errtrace"
  )

  var pkgLevelError error
  var initializedError error = errors.New("outside function")

  // Returns a single error
  func withError() error {
    return errors.New("some error")
  }

  // Returns multiple values, including an error
  func withMultipleReturn() (string, error) {
    return "some string", errors.New("some error")
  }

  // Returns a wrapped error
  func withWrappedError() error {
    return fmt.Errorf("some error")
  }

  // Returns error in first position
  func withErrorFirst() (error, string) {
    return errors.New("some error"), "some string"
  }

  // Returns error in second position
  func withErrorSecond() (string, error, string) {
    return "first", errors.New("some error"), "last"
  }

  // Return multiple errors
  func withMultipleErrors() (error, error) {
    return errors.New("first"), errors.New("second")
  }

  // Return an error that was declared at the package level
  func packageDeclaredLevelError() error {
    pkgLevelError = errors.New("inside function")
    return pkgLevelError
  }

  // Return an error that was initialized at the package level
  func packageInitializedLevelError() error {
    return initializedError
  }

  // No matches - doesn't return error
  func noMatch(val uint32) string {
    return ""
  }

  // uber-go/multierr =========================================================
  // Returns error from multierr
  func withMultierrInvoker() error {
    return multierr.Combine(errors.New("1"), errors.New("2"))
  }

  // Returns multiple values, including error
  func multipleWithInvoker() (string, error) {
    return "", multierr.Combine(errors.New("1"), errors.New("2"))
  }

  // Returns a multierr Error with append
  func withMultierrAppend() error {
      var err error
      err = multierr.Append(err, errors.New("first"))
      err = multierr.Append(err, errors.New("second"))
      return err
  }

  // Returns multiple return values, including multierr.Append error
  func multipleWithMultierrAppend() (string, error) {
      var err error
      err = multierr.Append(err, errors.New("first"))
      return "", err
  }

  // go-errors/errors =========================================================
  // Returns go-errors/errors.Error
  func withGoErrorsError() error {
    return goerrors.New("goerrors")
  }

  // Returns multiple values, including goerrors.Error
  func multipleWithGoerrors() (string, error) {
    return "", goerrors.New("goerrors")
  }

  // joomcode/errorx =========================================================
  // Returns errorx.Error
  func withErrorxError() error {
    return errorx.Cast(errors.New("errorx"))
  }

  // Returns multiple values, including errorx.Error
  func multipleWithErrorx() (string, error) {
    return "", errorx.Cast(errors.New("errorx"))
  }

  // Returns errorx.Error with Decorate
  func withErrorxDecorate() error {
    return errorx.Decorate(errors.New("decorated"), "context")
  }

  // Returns multiple values, including errorx.Error with Decorate
  func multipleWithErrorxDecorate() (string, error) {
    return "", errorx.Decorate(errors.New("decorated"), "context")
  }

  // ztrue/tracerr =========================================================
  // Return tracerr.Error
  func withTracerrError() error {
    return tracerr.New("tracerr")
  }

  // Return multiple value, including tracerr.Error
  func multipleWithTracerr() (string, error) {
    return "", tracerr.New("tracerr")
  }

  // Returns tracerr.Error with Wrap
  func withTracerrStack() error {
    return tracerr.Wrap(errors.New("wrapped"))
  }

  // Returns multiple values, including tracerr.Error with Wrap
  func multipleWithTracerrStack() (string, error) {
    return "", tracerr.Wrap(errors.New("wrapped"))
  }

  // bracesdev/errtrace ========================================================
  // Returns error from errtrace
  func withErrtraceNew() error {
    return errtrace.New("errtrace")
  }

  // Returns multiple values, including error from errtrace
  func multipleWithErrtrace() (string, error) {
    return "", errtrace.New("errtrace")
  }

  // Return error from errtrace.Wrap
  func withErrtraceWrapped() error {
    return errtrace.Wrap(errors.New("errtrace"))
  }

  // Return multiple values, including error
  func multipleWithErrtraceWrapped() (string, error) {
    return "", errtrace.Wrap(errors.New("errtrace"))
  }

  // custom error type ========================================================
  type customError struct {
    msg string
  }

  func (c customError) Error() string {
    return fmt.Sprintf("error: %s", c.msg)
  }

  // Return custom error
  func withCustomError() customError {
    return customError {
      msg: "hello",
    }
  }

  func multipleWithCustomError() (string, customError) {
    return "", customError{msg: "hello"}
  }