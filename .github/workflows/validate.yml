name: Tests
on:
  pull_request:
    branches: ['**']
  merge_group:
    branches: [main]
  push:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions: read-all

env:
  # Make sure we're actually testing with the intended Go release (i.e, ensure
  # no automatic toolchain download happens).
  GOTOOLCHAIN: local

jobs:
  ##############################################################################
  # Run all the code generators; and refresh the LICENSES-3rdparty.csv file
  generate:
    runs-on: ubuntu-latest
    name: Run all generators
    outputs:
      has-patch: ${{ steps.is-tree-dirty.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup go
        id: setup-go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
        with:
          go-version: stable
          cache-dependency-path: '**/go.mod'

      - name: Run 'go generate ./...'
        run: |-
          mkdir -p ${GOCOVERDIR}
          go generate ./...
          go -C _integration-tests generate ./...
        env:
          GOFLAGS: -covermode=atomic -coverpkg=github.com/datadog/orchestrion/...,./...
          GOCOVERDIR: ${{ github.workspace }}/coverage
      - name: Consolidate coverage report
        if: github.event_name != 'merge_group'
        run: go tool covdata textfmt -i ./coverage -o ./coverage/generator.out
      - name: Determine simple go version
        if: github.event_name != 'merge_group'
        id: go
        run: |-
          set -euo pipefail
          echo "version=$(echo '${{ steps.setup-go.outputs.go-version }}' | cut -d'.' -f1,2)" >> "${GITHUB_OUTPUT}"
      - name: Upload coverage report
        if: github.event_name != 'merge_group'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          if-no-files-found: error
          name: coverage-reports.generator,go${{ steps.go.outputs.version }},${{ runner.os }},${{ runner.arch }}
          path: ./coverage/generator.out

      - name: Run 'go mod tidy'
        # Don't run for push, it's not necessary
        if: github.event_name != 'push'
        run: find . -iname go.mod -execdir go mod tidy \;

      - name: Refresh LICENSE-3rdparty.csv
        run: ./tools/make-licenses.sh
        env:
          TMPDIR: ${{ runner.temp }}

      - name: Check if working tree is dirty
        # Don't run for push, it's not necessary
        if: github.event_name != 'push'
        id: is-tree-dirty
        run: |-
          git add .
          git diff --staged --patch --exit-code > .repo.patch || echo "result=true" >> ${GITHUB_OUTPUT}
      - name: Upload patch
        if: github.event_name != 'push' && steps.is-tree-dirty.outputs.result == 'true'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: repo.patch
          path: .repo.patch
      - name: Fail build if working tree is dirty
        if: github.event_name == 'push' && steps.is-tree-dirty.outputs.result == 'true'
        run: |-
          echo "::error::Files have been modified by 'go generate ./...' (see logs)."
          cat .repo.patch
          exit 1
  ##############################################################################
  # If the generators changed anything, and we can update the PR, then we'll
  # proactively do it with the mutator token.
  self-mutation:
    needs: generate
    runs-on: ubuntu-latest
    name: Update PR with generated files
    if: always() && needs.generate.outputs.has-patch == 'true' && github.event_name == 'pull_request' && (github.event.pull_request.head.repo.full_name == github.repository || github.event.pull_request.maintainer_can_modify)
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: repo.patch
          path: ${{ runner.temp }}
      - name: Apply patch
        run: |-
          [ -s '${{ runner.temp }}/.repo.patch' ] && git apply '${{ runner.temp }}/.repo.patch' || echo 'Empty patch. Skipping.'
      # We use ghcommit to create signed commits directly using the GitHub API
      - name: Push changes
        uses: planetscale/ghcommit-action@c7915d6c18d5ce4eb42b0eff3f10a29fe0766e4c # v0.1.44
        with:
          commit_message: "chore: update generated files"
          repo: ${{ github.event.pull_request.head.repo.full_name }}
          branch: ${{ github.event.pull_request.head.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.MUTATOR_GITHUB_TOKEN }}

  ##############################################################################
  # Run the various linters we have set up...
  lint:
    needs: generate
    runs-on: ubuntu-latest
    name: Go Linters
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
        with:
          go-version: stable
          cache-dependency-path: "**/go.mod"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6
        with:
          version: v1.52.2
          skip-cache: true # actions/setup-go has already done this
      - name: Verify license headers
        run: go run tools/headercheck/header_check.go
      - name: vet
        run: go vet ./...

  ##############################################################################
  # Verify all GitHub workflows have hash-pinned actions
  lint-workflows:
    runs-on: ubuntu-latest
    name: GitHub Workflow Linters
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Ensure SHA pinned actions
        uses: zgosalvez/github-actions-ensure-sha-pinned-actions@3c16e895bb662b4d7e284f032cbe8835a57773cc # v3

  ##############################################################################
  # Run all unit tests with coverage enabled
  unit-tests:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [oldstable, stable]
    name: Unit tests (go ${{ matrix.go-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup Go
        id: setup-go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: "**/go.mod"
      - name: Run unit tests
        shell: bash
        run: |-
          mkdir -p coverage
          test_args=("-shuffle=on" "-race")
          if [ "${{ github.event_name }}" != "merge_group" ]; then
            test_args+=("-cover" "-covermode=atomic" "-coverpkg./...,github.com/datadog/orchestrion/..." "-coverprofile=${{ github.workspace }}/coverage/unit.out")
          fi
          go test "${test_args[@]}" ./...
      - name: Run integraton suite unit tests
        shell: bash
        run: |-
          mkdir -p coverage
          test_args=("-shuffle=on" "-race")
          if [ "${{ github.event_name }}" != "merge_group" ]; then
            test_args+=("-cover" "-covermode=atomic" "-coverpkg./...,github.com/datadog/orchestrion/..." "-coverprofile=${{ github.workspace }}/coverage/integration.out")
          fi
          go -C _integration-tests test "${test_args[@]}" ./...
      - name: Determine simple go version
        if: github.event_name != 'merge_group'
        id: go
        shell: bash
        run: |-
          set -euo pipefail
          echo "version=$(echo '${{ steps.setup-go.outputs.go-version }}' | cut -d'.' -f1,2)" >> "${GITHUB_OUTPUT}"
      - name: Upload coverage report
        if: github.event_name != 'merge_group'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          if-no-files-found: error
          name: coverage-reports.unit,go${{ steps.go.outputs.version }},${{ runner.os }},${{ runner.arch }}
          path: |-
            ./coverage/unit.out
            ./coverage/integration.out

  ##############################################################################
  # Run all integration tests and gather extensive coverage
  integration-tests:
    needs: generate
    strategy:
      fail-fast: false
      matrix:
        runs-on: [macos, ubuntu, windows]
        go-version: [oldstable, stable]
        build-mode: [DRIVER]
        include:
          # Alternate build modes (only on ubuntu, latest go; to save CI time)
          - runs-on: ubuntu
            go-version: oldstable
            build-mode: TOOLEXEC
          - runs-on: ubuntu
            go-version: oldstable
            build-mode: GOFLAGS
    runs-on: ${{ matrix.runs-on }}-latest
    name: Integration tests (go ${{ matrix.go-version }}, ${{ matrix.runs-on }}, ${{ matrix.build-mode }})
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup go
        id: setup-go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: "**/go.mod"
      - name: Setup python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5
        with:
          python-version: 3.x
          cache: pip
          cache-dependency-path: _integration-tests/utils/agent/requirements.txt
      - name: Install python dependencies
        run: pip install -r _integration-tests/utils/agent/requirements.txt
      - name: Build orchestrion binary
        shell: bash
        run: |-
          build_args=()
          if [ "${{ github.event_name }}" != "merge_group" ]; then
            build_args+=("-cover" "-covermode=atomic" "-coverpkg=./...")
          fi
          go build "${build_args[@]}" -o="bin/orchestrion.exe" .
      - name: Run Integration Tests
        shell: bash
        run: |-
          mkdir -p "${GOCOVERDIR}"
          test_args=("-shuffle=on")
          if [ "${{ github.event_name }}" != "merge_group" ]; then
            test_args+=("-coverpkg=./...,github.com/datadog/orchestrion/..." "-covermode=atomic" "-cover" "-coverprofile=${{ github.workspace }}/coverage/integration.run.out")
          fi

          case "${{ matrix.build-mode }}" in
          "DRIVER")
            bin/orchestrion.exe go -C=_integration-tests test "${test_args[@]}" ./...
            ;;
          "TOOLEXEC")
            go -C=_integration-tests test "${test_args[@]}" -toolexec="${{ github.workspace }}/bin/orchestrion.exe toolexec" ./...
            ;;
          "GOFLAGS")
            export GOFLAGS="'-toolexec=${{ github.workspace }}/bin/orchestrion.exe toolexec' ${GOFLAGS}"
            go -C=_integration-tests test "${test_args[@]}" ./...
            ;;
          *)
            echo "Unknown build mode: ${{ matrix.build-mode }}"
            exit 1
            ;;
          esac
        env:
          GOCOVERDIR: ${{ github.workspace }}/coverage/raw
          GOFLAGS: -tags=integration,buildtag # Globally set build tags (buildtag is used by the dd-span test)
      - name: Consolidate coverage report
        if: github.event_name != 'merge_group'
        run: go tool covdata textfmt -i ./coverage/raw -o ./coverage/integration.out
      - name: Determine go minor version
        id: go
        if: github.event_name != 'merge_group'
        shell: bash
        run: |-
          set -euo pipefail
          echo "version=$(echo '${{ steps.setup-go.outputs.go-version }}' | cut -d'.' -f1,2)" >> "${GITHUB_OUTPUT}"
      - name: Upload coverage report
        if: github.event_name != 'merge_group'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          if-no-files-found: error
          name: coverage-reports.integration,go${{ steps.go.outputs.version }},${{ runner.os }},${{ runner.arch }},${{ matrix.build-mode }}
          path: |-
            ./coverage/integration.out
            ./coverage/integration.run.out

  ##############################################################################
  # Assert everything is complete. This simplifies branch protection settings
  # and allows us to have one single trigger for CodeCov reporting.
  complete:
    runs-on: ubuntu-latest
    name: Complete
    needs:
      - generate
      - lint
      - lint-workflows
      - unit-tests
      - integration-tests
    if: '!cancelled()'
    steps:
      - name: Success
        if: needs.generate.result == 'success' && needs.lint.result == 'success' && needs.lint-workflows.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success'
        run: echo "OK"
      - name: Failed
        if: needs.generate.result != 'success' || needs.lint.result != 'success' || needs.lint-workflows.result != 'success' || needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success'
        run: |-
          echo "Failed!"
          exit 1

  ##############################################################################
  # Produce a CodeCov coverage report with all uploaded code coverage data.
  coverage-report:
    runs-on: ubuntu-latest
    name: Coverage Report
    needs:
      - generate
      - unit-tests
      - integration-tests
    if: github.event_name != 'merge_group'
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Download coverage reports
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          merge-multiple: false # Extract in per-artifact directories
          pattern: coverage-reports.*
          path: coverage
      - name: Download codecov CLI
        run: |-
          set -euo pipefail

          curl -fSsL "${BASE_URL}" -o "./codecov"
          curl -fSsL "${BASE_URL}.SHA256SUM" -o "./codecov.SHA256SUM"
          curl -fSsL "${BASE_URL}.SHA256SUM.sig" -o "./codecov.SHA256SUM.sig"

          # Import the CodeCov security key
          curl -fSsL "https://keybase.io/codecovsecurity/pgp_keys.asc" | gpg --no-default-keyring --keyring trustedkeys.gpg --import

          # Verify the downloaded binary matches expected signatures
          gpgv "./codecov.SHA256SUM.sig" "./codecov.SHA256SUM"
          shasum -a 256 -c "./codecov.SHA256SUM"

          chmod a+x "./codecov"
        env:
          BASE_URL: https://cli.codecov.io/latest/linux${{ runner.arch == 'ARM64' && '-arm64' || '' }}/codecov
        working-directory: ${{ runner.temp }}
      - name: Submit coverage data to CodeCov
        shell: bash
        run: |-
          set -euo pipefail

          pr=()
          sha="${{ github.sha }}"
          parentsha="${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            pr+=("--pr=${{ github.event.number }}")
            sha="${{ github.event.pull_request.head.sha }}"
          fi

          echo "::group::Register commit metadata with CodeCov"
          ${{ runner.temp }}/codecov                                            \
            --auto-load-params-from=GithubActions                               \
            --verbose                                                           \
            create-commit                                                       \
            --parent-sha="${parentsha}"                                         \
            "${pr[@]}"                                                          \
            --sha="${sha}"                                                      \
            --fail-on-error                                                     \
            --git-service=github                                                \
            --token="${CODECOV_TOKEN}"                                          \
            --slug="${{ github.repository }}"
          echo "::endgroup::"

          echo "::group::Create a new blank CodeCov report"
          ${{ runner.temp }}/codecov                                            \
            --auto-load-params-from=GithubActions                               \
            --verbose                                                           \
            create-report                                                       \
            "${pr[@]}"                                                          \
            --sha="${sha}"                                                      \
            --fail-on-error                                                     \
            --git-service=github                                                \
            --token="${CODECOV_TOKEN}"                                          \
            --slug="${{ github.repository }}"
          echo "::endgroup::"

          for dir in coverage/coverage-reports.*; do
            echo "::group::Upload ${dir#coverage/coverage-reports.} to CodeCov"
            file=()
            for f in "${dir}"/*.out; do
              file+=("--file=${f}")
            done
            flag=()
            for f in $(echo "${dir#coverage/coverage-reports.}" | tr ',' ' '); do
              flag+=("--flag="${f}")
            done
            ${{ runner.temp }}/codecov                                          \
              --auto-load-params-from=GithubActions                             \
              --verbose                                                         \
              do-upload                                                         \
              --dir="${dir}"                                                    \
              "${file[@]}"                                                      \
              --name="${dir#coverage/}"                                         \
              "${pr[@]}"                                                        \
              "${flag[@]}"                                                      \
              --sha="${sha}"                                                    \
              --fail-on-error                                                   \
              --git-service=github                                              \
              --token="${CODECOV_TOKEN}"                                        \
              --slug="${{ github.repository }}"
            echo "::endgroup::"
          done

          echo "::group::Create CodeCov report results"
          ${{ runner.temp }}/codecov                                            \
            --auto-load-params-from=GithubActions                               \
            --verbose                                                           \
            create-report-results                                               \
            --sha="${sha}"                                                      \
            --fail-on-error                                                     \
            --git-service=github                                                \
            --token="${CODECOV_TOKEN}"                                          \
            --slug="${{ github.repository }}"
          echo "::endgroup::"

          echo "::group::Issue GitHub notifications"
          ${{ runner.temp }}/codecov                                            \
            --auto-load-params-from=GithubActions                               \
            --verbose                                                           \
            send-notifications                                                  \
            --sha="${sha}"                                                      \
            --fail-on-error                                                     \
            --git-service=github                                                \
            --token="${CODECOV_TOKEN}"                                          \
            --slug=${{ github.repository }}
          echo "::endgroup::"
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
