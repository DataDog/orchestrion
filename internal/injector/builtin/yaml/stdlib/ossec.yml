# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
%YAML 1.1
---
meta:
  name: os
  description: Protection from Local File Inclusion (LFI) Attacks
  icon: save

# All calls that are susceptible to LFI attacks go through the os.OpenFile function, therefore we only need to protect
# this function. This can change in the future if new functions are added to the os package that are susceptible to LFI
aspects:
  - id: OpenFile
    join-point:
      all-of:
        - import-path: os
        - function-body:
            function:
              - name: OpenFile
    advice:
      - prepend-statements:
          imports:
            ossec: gopkg.in/DataDog/dd-trace-go.v1/internal/appsec/emitter/ossec
            dyngo: gopkg.in/DataDog/dd-trace-go.v1/internal/appsec/dyngo
            events: gopkg.in/DataDog/dd-trace-go.v1/appsec/events
          template: |-
            println("os.OpenFile")
            parent, _ := dyngo.FromContext(nil)
            if parent != nil {
                println("os.OpenFile: parent is not nil")
            	op := &ossec.OpenOperation{
                    Operation: dyngo.NewOperation(parent),
                }

                var __dd_block bool
                dyngo.OnData(op, func(_ *events.BlockingSecurityEvent) {
                    __dd_block = true
                })

                dyngo.StartOperation(op, ossec.OpenOperationArgs{
                    Path: {{ .Function.Argument 0 }},
                    Flags: {{ .Function.Argument 1 }},
                    Perms: {{ .Function.Argument 2 }},
                })

                var __dd_file any = {{ .Function.Returns 0 }}
                defer dyngo.FinishOperation(op, ossec.OpenOperationRes{
                    File: &__dd_file,
                    Err: &{{ .Function.Returns 1 }},
                })

                if __dd_block {
                    return
                }
            }
