%YAML 1.1
---
aspects:
  - id: Register
    join-point:
      function-call: database/sql.Register
    advice:
      - wrap-expression:
          imports:
            sqltrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/database/sql
            sql: database/sql
            driver: database/sql/driver
          template: |-
            func(driverName string, driver driver.Driver) {
                sql.Register(driverName, driver)
                sqltrace.Register(driverName, driver)
            }({{ index .AST.Args 0 }}, {{ index .AST.Args 1 }})

syntheticReferences:
  database/sql/driver: true # shadowed import
  gopkg.in/DataDog/dd-trace-go.v1/contrib/database/sql: true

code: |-
  package test

  import (
    "database/sql"
    "database/sql/driver"
  )

  var conn driver.Connector

  func main() {
    var driver string // shadowing import
    sql.Register("foo", nil)

    db1, err := sql.Open("foo", "bar")
    if err != nil {
      panic(err)
    }
    defer db1.Close()

    println(driver)

    db2 := sql.OpenDB(conn)
    defer db2.Close()
  }
