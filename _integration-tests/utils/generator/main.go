// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path"
	"path/filepath"
	"slices"
	"strings"

	"github.com/dave/jennifer/jen"
)

const (
	genTestName = "gen_test.go"
	utilsPkg    = "datadoghq.dev/orchestrion/_integration-tests/utils"
)

func init() {
	flag.Usage = func() {
		_, _ = fmt.Fprintf(os.Stderr, "Usage: %s <dir>\n", os.Args[0])
		flag.PrintDefaults()
	}
}

func main() {
	flag.Parse()
	if flag.NArg() != 1 {
		flag.Usage()
		os.Exit(2)
	}
	root, err := filepath.Abs(flag.Arg(0))
	if err != nil {
		log.Fatal(err)
	}

	testPkgs, err := os.ReadDir(root)
	if err != nil {
		log.Fatalf("failed listing directory: %v\n", err)
	}
	// Ensure stable ordering by explicitly sorting...
	slices.SortFunc(testPkgs, func(lhs, rhs os.DirEntry) int {
		return strings.Compare(lhs.Name(), rhs.Name())
	})

	for _, pkg := range testPkgs {
		if !pkg.IsDir() || pkg.Name() == "testdata" {
			continue
		}
		testDir := path.Join(root, pkg.Name())
		out := path.Join(testDir, genTestName)
		pkgName, testCases := parseCode(testDir)
		f := testFile(pkgName)

		for _, tc := range testCases {
			testSuffix := ""
			if n := strings.TrimPrefix(tc, "TestCase"); n != "" {
				testSuffix = "_" + n
			}

			f.
				Func().
				Id("TestIntegration_" + pkgName + testSuffix).
				Params(jen.Id("t").Op("*").Qual("testing", "T")).
				Block(
					// utils.RunTest(t, new(TestCase))
					jen.Qual(utilsPkg, "RunTest").Call(jen.Id("t"), jen.New(jen.Id(tc))),
				).
				Line().Empty()
		}

		if err := f.Save(out); err != nil {
			log.Fatalf("failed writing file: %v\n", err)
		}
	}
}

func testFile(packageName string) *jen.File {
	f := jen.NewFile(packageName)
	f.HeaderComment("Unless explicitly stated otherwise all files in this repository are licensed")
	f.HeaderComment("under the Apache License Version 2.0.")
	f.HeaderComment("This product includes software developed at Datadog (https://www.datadoghq.com/).")
	f.HeaderComment("Copyright 2023-present Datadog, Inc.")
	f.HeaderComment("")
	f.HeaderComment("Code generated by 'go generate'; DO NOT EDIT.")

	f.Comment("//go:build integration")

	f.ImportName(utilsPkg, "utils")

	return f
}

func parseCode(testDir string) (pkgName string, testCases []string) {
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, testDir, nil, parser.ParseComments)
	if err != nil {
		log.Fatalf("failed to parse AST for dir: %v\n", err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("%s: expected exactly 1 package, got %d", testDir, len(pkgs))
	}

	for name, pkg := range pkgs {
		pkgName = name
		for _, f := range pkg.Files {
			for _, decl := range f.Decls {
				gd, ok := decl.(*ast.GenDecl)
				if !ok || gd.Tok != token.TYPE {
					continue
				}
				for _, sp := range gd.Specs {
					typeSpec, ok := sp.(*ast.TypeSpec)
					if !ok {
						continue
					}
					name := typeSpec.Name.String()
					if strings.HasPrefix(name, "TestCase") {
						testCases = append(testCases, name)
					}
				}
			}
		}
	}
	// ensure order in test cases as well and remove repeated elements (e.g. in case of different OS implementations)
	slices.Sort(testCases)
	testCases = slices.Compact(testCases)
	return pkgName, testCases
}
