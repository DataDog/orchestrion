//line samples/client/gorm.go:1:1
// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
//line samples/client/gorm.go:10
	"log"

	jinzhu "github.com/jinzhu/gorm"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	_ "github.com/mattn/go-sqlite3"
//line <generated>
	__orchestrion_sql "gopkg.in/DataDog/dd-trace-go.v1/contrib/database/sql"
	__orchestrion_gorm "gopkg.in/DataDog/dd-trace-go.v1/contrib/gorm.io/gorm.v1"
	__orchestrion_gormtrace "gopkg.in/DataDog/dd-trace-go.v1/contrib/jinzhu/gorm"
)

//line samples/client/gorm.go:19
func gormClient() {
	sqlDB, err := __orchestrion_sql.Open("sqlite3", "file::memory:?cache=shared")
	if err != nil {
		log.Fatal(err)
	}
	defer sqlDB.Close()

	db, err := __orchestrion_gorm.Open(postgres.New(postgres.Config{Conn: sqlDB}), &gorm.Config{})
	if err != nil {
		log.Fatal(err)
	}

	var user struct {
		gorm.Model
		Name string
	}
	db.Where("name = ?", "gorm.io").First(&user)
}

func jinzhuGormClient() {
	db, err :=
//line <generated>
		func() (*jinzhu.DB, error) {
			db, err :=
//line samples/client/gorm.go:39
				jinzhu.Open("sqlite3", "file::memory:?cache=shared")
//line <generated>
			if err != nil {
				return nil, err
			}
			return __orchestrion_gormtrace.WithCallbacks(db), err
		}()
//line samples/client/gorm.go:40
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	var user struct {
		jinzhu.Model
		Name string
	}
	db.Where("name = ?", "jinzhu").First(&user)
}
