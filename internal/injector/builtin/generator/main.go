// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
	"crypto/sha512"
	"encoding/base64"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/datadog/orchestrion/internal/injector/aspect"
	"github.com/dave/jennifer/jen"
	"golang.org/x/tools/go/packages"
	"gopkg.in/yaml.v3"
)

func main() {
	var (
		pkg    string
		glob   string
		output string
	)

	flag.StringVar(&pkg, "p", "", "package name")
	flag.StringVar(&glob, "i", "", "input files (glob syntax)")
	flag.StringVar(&output, "o", "", "output file")
	flag.Parse()

	matches, err := filepath.Glob(glob)
	if err != nil {
		log.Fatalf("failed to process glob pattern %q: %v\n", glob, err)
	}

	if len(matches) == 0 {
		log.Fatalf("no files matched pattern %q\n", glob)
	}
	// Ensure the files are sorted for determinism.
	sort.Strings(matches)

	file := jen.NewFile(pkg)
	file.HeaderComment("Unless explicitly stated otherwise all files in this repository are licensed")
	file.HeaderComment("under the Apache License Version 2.0.")
	file.HeaderComment("This product includes software developed at Datadog (https://www.datadoghq.com/).")
	file.HeaderComment("Copyright 2023-present Datadog, Inc.")
	file.HeaderComment("")
	file.HeaderComment(fmt.Sprintf("Code generated by %q; DO NOT EDIT.", "github.com/datadog/orchestion/internal/injector/builtin/generator "+strings.Join(os.Args[1:], " ")))

	checksum := sha512.New()
	file.Comment("Aspects is the list of built-in aspects.")
	file.Var().Id("Aspects").Op("=").Index(jen.Op("...")).Qual("github.com/datadog/orchestrion/internal/injector/aspect", "Aspect").ValuesFunc(func(g *jen.Group) {
		for _, match := range matches {
			// Checksum header -- SOH <relative file name> STX
			writeAll(checksum, []byte(fmt.Sprintf("\x01%s\x02", match)))

			data, err := os.ReadFile(match)
			if err != nil {
				log.Fatalf("failed to read input file %q: %v\n", match, err)
			}

			// Checksum body -- <data> ETX
			writeAll(checksum, data)
			writeAll(checksum, []byte{'\x03'})

			var aspects []aspect.Aspect
			if err := yaml.Unmarshal(data, &aspects); err != nil {
				log.Fatalf("failed to unmarshal input file %q: %v\n", match, err)
			}

			for i, aspect := range aspects {
				item := g.Line()
				if i == 0 {
					item = item.Commentf("From %s", match).Line()
				}
				jp, adv := aspect.AsCode()
				item.Values(
					jen.Line().Id("JoinPoint").Op(":").Add(jp),
					jen.Line().Id("Advice").Op(":").Add(adv),
					jen.Line().Empty(),
				)
			}
		}
		g.Empty().Line()
	})

	file.Comment("RestorerMap is a set of import path to name mappings for packages that would be incorrectly named by restorer.Guess")
	file.Var().Id("RestorerMap").Op("=").Map(jen.String()).String().ValuesFunc(func(g *jen.Group) {
		pkgs, err := packages.Load(&packages.Config{}, "gopkg.in/DataDog/dd-trace-go.v1/...")
		if err != nil {
			log.Fatalf("Failed to load packages: %v\n", err)
		}
		sort.Sort(sortable(pkgs))

		for _, pkg := range pkgs {
			if strings.HasSuffix(pkg.PkgPath, "/internal") || strings.Contains(pkg.PkgPath, "/internal/") {
				// We don't care about internal packages here (at least for now)
				continue
			}
			if strings.HasSuffix(pkg.PkgPath, "/"+pkg.Name) {
				// We don't care about packages for which `restorer.Guess` would infer the right name.
				continue
			}
			g.Line().Lit(pkg.PkgPath).Op(":").Lit(pkg.Name)
		}

		g.Line().Empty()
	})

	file.Comment("Checksum is a checksum of the built-in configuration which can be used to invalidate caches.")
	file.Const().Id("Checksum").Op("=").Lit("sha512:" + base64.StdEncoding.EncodeToString(checksum.Sum(nil)))

	if err := file.Save(output); err != nil {
		log.Fatalf("Error writing output file %q: %v\n", output, err)
	}
}

type sortable []*packages.Package

func (s sortable) Len() int {
	return len(s)
}

func (s sortable) Less(i, j int) bool {
	return s[i].PkgPath < s[j].PkgPath
}

func (s sortable) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

func writeAll(w io.Writer, data []byte) {
	for len(data) > 0 {
		n, err := w.Write(data)
		if err != nil {
			log.Fatalf("Failed while computing checksum: %v\n", err)
		}
		data = data[n:]
	}
}

func init() {
	log.SetPrefix("github.com/DataDog/orchestrion/internal/injector/builtin/generate: ")
}
