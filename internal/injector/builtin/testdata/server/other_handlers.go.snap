//line samples/server/other_handlers.go:1:1
// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
	"context"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"strings"
	"time"
//line <generated>
	__orchestrion_instrument "github.com/DataDog/orchestrion/instrument"
	__orchestrion_tracer "gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer"
)

//line samples/server/other_handlers.go:18
type foo struct{}

func (f foo) fooHandler(rw http.ResponseWriter, req *http.Request) {
	rw.WriteHeader(http.StatusOK)
	rw.Write([]byte("Foo!"))
}

func buildHandlers() {
	http.HandleFunc("/foo/bar",
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:26
			func(writer http.ResponseWriter, request *http.Request) {
				writer.Write([]byte("done!"))
			}))
	v :=
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:29
			func(w http.ResponseWriter, r *http.Request) {
				w.Write([]byte("another one!"))
			})

	fmt.Printf("%T\n", v)

	type holder struct {
		f http.HandlerFunc
	}

	x := holder{
		f:
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:40
			func(w http.ResponseWriter, request *http.Request) {
				w.Write([]byte("asdf"))
			}),
	}

	fmt.Println(x)

	// silly legal things
//line <generated>
	__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:48
		func(w http.ResponseWriter, r *http.Request) {
			client := &http.Client{
				Timeout: time.Second,
			}
			req, err := http.NewRequestWithContext(context.Background(), http.MethodPost, "localhost:8080", strings.NewReader(os.Args[1]))
			if err != nil {
				panic(err)
			}
			resp, err := client.Do(req)
			if err != nil {
				panic(err)
			}
			fmt.Println(resp.Status)
			w.Write([]byte("expression!"))
		})(httptest.NewRecorder(), httptest.NewRequest(http.MethodPost, "/asfd", nil))

	for i := 0; i < 10; i++ {
		go
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:65
			func(w http.ResponseWriter, r *http.Request) {
				w.Write([]byte("goroutine!"))
			})(httptest.NewRecorder(), httptest.NewRequest(http.MethodPost, "/asfd", nil))
	}

	defer
//line <generated>
	__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:70
		func(w http.ResponseWriter, r *http.Request) {
			w.Write([]byte("goroutine!"))
		})(httptest.NewRecorder(), httptest.NewRequest(http.MethodPost, "/asfd", nil))
}

//dd:span foo:bar type:potato
func myFunc(__argument__0 context.Context, name string) {
//line <generated>
	{
		var span __orchestrion_tracer.Span
		span, __argument__0 = __orchestrion_tracer.StartSpanFromContext(__argument__0, "myFunc",
			__orchestrion_tracer.Tag("function-name", "myFunc"),
			__orchestrion_tracer.Tag("foo", "bar"),
			__orchestrion_tracer.Tag("type", "potato"),
		)

		defer span.Finish()
	}
//line samples/server/other_handlers.go:77
	fmt.Println(name)
}

//dd:span foo2:bar2 type:request
func myFunc2(name string, __argument__1 *http.Request) {
//line <generated>
	{
		ctx := __argument__1.Context()
		var span __orchestrion_tracer.Span
		span, ctx = __orchestrion_tracer.StartSpanFromContext(ctx, "myFunc2",
			__orchestrion_tracer.Tag("function-name", "myFunc2"),
			__orchestrion_tracer.Tag("foo2", "bar2"),
			__orchestrion_tracer.Tag("type", "request"),
		)
		__argument__1 = __argument__1.WithContext(ctx)

		defer span.Finish()
	}
//line samples/server/other_handlers.go:82
	fmt.Println(name)
}

//dd:span foo3:bar3 type:request span.name:customName
func myFunc3(name string) (__result__0 error) {
//line <generated>
	{
		ctx := context.TODO()
		var span __orchestrion_tracer.Span
		span, ctx = __orchestrion_tracer.StartSpanFromContext(ctx, "customName",
			__orchestrion_tracer.Tag("function-name", "myFunc3"),
			__orchestrion_tracer.Tag("foo3", "bar3"),
			__orchestrion_tracer.Tag("type", "request"),
		)

		defer func() {
			span.Finish(__orchestrion_tracer.WithError(__result__0))
		}()

	}
//line samples/server/other_handlers.go:87
	_, err := fmt.Println(name)
	return err
}

func registerHandlers() {
	handler := http.HandlerFunc(myHandler)
	http.Handle("/handle-1", handler)
	http.Handle("/hundle-2", http.HandlerFunc(myHandler))
	http.Handle("/hundle-3", http.HandlerFunc(
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:95
			func(w http.ResponseWriter, r *http.Request) {})))
	http.HandleFunc("/handlefunc-1", handler)
	http.HandleFunc("/handlefunc-2", http.HandlerFunc(myHandler))
	http.HandleFunc("/handlefunc-3",
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:98
			func(w http.ResponseWriter, r *http.Request) {}))
	s := http.NewServeMux()
	s.Handle("/handle-mux", handler)
	s.Handle("/handle-mux", http.HandlerFunc(myHandler))
	s.Handle("/handle-mux", http.HandlerFunc(
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:102
			func(w http.ResponseWriter, r *http.Request) {})))
	s.HandleFunc("/handlefunc-1", handler)
	s.HandleFunc("/handlefunc-2", http.HandlerFunc(myHandler))
	s.HandleFunc("/handlefunc-3",
//line <generated>
		__orchestrion_instrument.WrapHandlerFunc(
//line samples/server/other_handlers.go:105
			func(w http.ResponseWriter, r *http.Request) {}))
	_ = &http.Server{
		Addr: ":8080",
		Handler:
		//dd:startwrap
//line <generated>
		__orchestrion_instrument.WrapHandler(
//line samples/server/other_handlers.go:108
			handler),
		//dd:endwrap
	}
}
