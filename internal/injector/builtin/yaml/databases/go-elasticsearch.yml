# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=../../../../../docs/static/schema.json
meta:
  name: github.com/elastic/go-elasticsearch
  description: The official Go client for Elasticsearch
  icon: database

# FIXME: in v7 and v8, if elasticsearch.Config.CACert != nil, the call to elasticsearch.NewClient will always return
#        an error when setting a non *http.Transport in the Transport (http.RoundTripper) field.
#        The workaround from the user-side is to configure the certificate in the Transport instead, but for now we decide
#        to not modify the configuration so we don't make the user's application crash.
#        This problem will be fixed by migrating our instrumentation to use the elasticsearch.Config.Instrumentation
#        field instead.
aspects:
  - id: Wrap elasticsearch.Config value (v6)
    join-point:
      all-of:
        - struct-literal:
            type: github.com/elastic/go-elasticsearch/v6.Config
            match: value-only
        - not:
            import-path: github.com/elastic/go-elasticsearch/v6
    advice:
      - wrap-expression:
          imports:
            elasticsearch: github.com/elastic/go-elasticsearch/v6
            elastictrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/elastic/go-elasticsearch.v6
          template: |-
            func(cfg elasticsearch.Config) elasticsearch.Config {
              if cfg.Transport == nil {
                cfg.Transport = elastictrace.NewRoundTripper()
              } else {
                base := cfg.Transport
                cfg.Transport = elastictrace.NewRoundTripper(elastictrace.WithTransport(base))
              }
              return cfg
            }({{ . }})

  - id: Wrap elasticsearch.Config pointer (v6)
    join-point:
      all-of:
        - struct-literal:
            type: github.com/elastic/go-elasticsearch/v6.Config
            match: pointer-only
        - not:
            import-path: github.com/elastic/go-elasticsearch/v6
    advice:
      - wrap-expression:
          imports:
            elasticsearch: github.com/elastic/go-elasticsearch/v6
            elastictrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/elastic/go-elasticsearch.v6
          template: |- 
            func(cfg *elasticsearch.Config) *elasticsearch.Config {
              if cfg.Transport == nil {
                cfg.Transport = elastictrace.NewRoundTripper()
              } else {
                base := cfg.Transport
                cfg.Transport = elastictrace.NewRoundTripper(elastictrace.WithTransport(base))
              }
              return cfg
            }({{ . }})

  - id: Wrap elasticsearch.Config value (v7)
    join-point:
      all-of:
        - struct-literal:
            type: github.com/elastic/go-elasticsearch/v7.Config
            match: value-only
        - not:
            import-path: github.com/elastic/go-elasticsearch/v7/esapi
    advice:
      - wrap-expression:
          imports:
            elasticsearch: github.com/elastic/go-elasticsearch/v7
            elastictrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/elastic/go-elasticsearch.v6
          template: &templateValV7 |-
            func(cfg elasticsearch.Config) elasticsearch.Config {
              if cfg.CACert != nil {
                // refuse to set transport as it will make the NewClient call fail.
                return cfg
              }
              if cfg.Transport == nil {
                cfg.Transport = elastictrace.NewRoundTripper()
              } else {
                base := cfg.Transport
                cfg.Transport = elastictrace.NewRoundTripper(elastictrace.WithTransport(base))
              }
              return cfg
            }({{ . }})

  - id: Wrap elasticsearch.Config pointer (v7)
    join-point:
      all-of:
        - struct-literal:
            type: github.com/elastic/go-elasticsearch/v7.Config
            match: pointer-only
        - not:
            import-path: github.com/elastic/go-elasticsearch/v7/esapi
    advice:
      - wrap-expression:
          imports:
            elasticsearch: github.com/elastic/go-elasticsearch/v7
            elastictrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/elastic/go-elasticsearch.v6
          template: &templatePtrV7 |-
            func(cfg *elasticsearch.Config) *elasticsearch.Config {
              if cfg.CACert != nil {
                // refuse to set transport as it will make the NewClient call fail.
                return cfg
              }
              if cfg.Transport == nil {
                cfg.Transport = elastictrace.NewRoundTripper()
              } else {
                base := cfg.Transport
                cfg.Transport = elastictrace.NewRoundTripper(elastictrace.WithTransport(base))
              }
              return cfg
            }({{ . }})

  - id: Wrap elasticsearch.Config value (v8)
    join-point:
      all-of:
        - struct-literal:
            type: github.com/elastic/go-elasticsearch/v8.Config
            match: value-only
        - not:
            one-of:
              - import-path: github.com/elastic/go-elasticsearch/v8/esapi
              - import-path: github.com/elastic/go-elasticsearch/v8/typedapi/types
    advice:
      - wrap-expression:
          imports:
            elasticsearch: github.com/elastic/go-elasticsearch/v8
            elastictrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/elastic/go-elasticsearch.v6
          template: *templateValV7

  - id: Wrap elasticsearch.Config pointer (v8)
    join-point:
      all-of:
        - struct-literal:
            type: github.com/elastic/go-elasticsearch/v8.Config
            match: pointer-only
        - not:
            one-of:
              - import-path: github.com/elastic/go-elasticsearch/v8/esapi
              - import-path: github.com/elastic/go-elasticsearch/v8/typedapi/types
    advice:
      - wrap-expression:
          imports:
            elasticsearch: github.com/elastic/go-elasticsearch/v8
            elastictrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/elastic/go-elasticsearch.v6
          template: *templatePtrV7
