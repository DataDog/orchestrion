# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=../../../../../docs/static/schema.json
meta:
  name: runtime
  description: Operations that interact with Go's runtime system.
  icon: cog
  caveats: |-
    This configuration introduces a way to access the Goroutine Local Storage (GLS), which is not
    meant to be used directly by end-users. This is intended to be used only by tracer internals to
    enable trace context forwarding in places where a {{<godoc "context" "Context">}} value is not
    available.
aspects:
  - id: GLS Access
    join-point:
      struct-definition: runtime.g
    advice:
      - add-struct-field:
          name: __dd_gls
          type: any
      - add-blank-import: unsafe # Needed for go:linkname
      - inject-declarations:
          # Reference: https://github.com/golang/go/blob/6d89b38ed86e0bfa0ddaba08dc4071e6bb300eea/src/runtime/HACKING.md?plain=1#L44-L54
          template: |-
            //go:linkname __dd_orchestrion_gls_get __dd_orchestrion_gls_get
            var __dd_orchestrion_gls_get = func() any {
              return getg().m.curg.__dd_gls
            }

            //go:linkname __dd_orchestrion_gls_set __dd_orchestrion_gls_set
            var __dd_orchestrion_gls_set = func(val any) {
              getg().m.curg.__dd_gls = val
            }
  - id: Clear GLS slot on goroutine destroy
    join-point:
      all-of:
        - import-path: runtime
        - function-body:
            function:
              # This is the function that adds the g struct to the free list, so it can be re-used.
              - name: gfput
    advice:
      - prepend-statements:
          template: gp.__dd_gls = nil
  - id: Copy GLS slot to new goroutines
    join-point:
      all-of:
        - function-body:
            function:
              # This is the function that prepares a g struct, possibly from the free list, for use.
              - name: newproc1
        - import-path: runtime
    advice:
      - prepend-statements:
          # Similar to how pprof labels are copied, see:
          # https://github.com/golang/go/blob/3d9a89b05733f6787900ea7034aab0471e065946/src/runtime/proc.go#L5039-L5041
          template: |-
            {{- $newg := .Function.Result 0 -}}
            defer func(){
              if isSystemGoroutine({{ $newg }}, false) {
                return
              }
              mp := acquirem()
              defer releasem(mp)
              if mp.curg != nil {
                {{ $newg }}.__dd_gls = mp.curg.__dd_gls
              }
            }()
