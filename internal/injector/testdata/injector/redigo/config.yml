%YAML 1.1
---
aspects:
  - id: Dial
    join-point:
      function-call: github.com/gomodule/redigo/redis.Dial
    advice:
      - wrap-expression:
          imports:
            redigo: github.com/gomodule/redigo/redis
            redigotrace: gopkg.in/DataDog/dd-trace-go.v1/contrib/gomodule/redigo
          template: |-
            func() (redis.Conn, error) {
              {{ if .AST.Ellipsis }}
                opts := {{ index .AST.Args 2 }}
                anyOpts := make([]interface{}, len(opts))
                for i, v := range opts {
                  anyOpts[i] = v
                }
                return redigotrace.Dial({{ index .AST.Args 0 }}, {{ index .AST.Args 1 }}, anyOpts...)
              {{ else }}
                return redigotrace.Dial(
                  {{- range .AST.Args -}}
                    {{ . }},
                  {{- end -}}
                )
              {{ end }}
            }()

syntheticReferences:
  gopkg.in/DataDog/dd-trace-go.v1/contrib/gomodule/redigo: true

code: |-
  package test

  import (
    "time"

    "github.com/gomodule/redigo/redis"
  )

  func dial1(net, address string) error {
    c, err := redis.Dial(net, address)
    if err != nil {
      return err
    }
    defer c.Close()
    return use(c)
  }

  func dial2(net, address string) error {
    c, err := redis.Dial(net, address, redis.DialConnectTimeout(5*time.Second), redis.DialConnectTimeout(time.Minute))
    if err != nil {
      return err
    }
    defer c.Close()
    return use(c)
  }

  func dial3(net, address string) error {
    options := []redis.DialOption{
      redis.DialConnectTimeout(5*time.Second),
    }
    c, err := redis.Dial(net, address, options...)
    if err != nil {
      return err
    }
    defer c.Close()
    return use(c)
  }

  func use(c redis.Conn) error {
    _, err := c.Do("SET", "test", "success")
    return err
  }
