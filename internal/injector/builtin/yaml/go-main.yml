# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=../../../../docs/static/schema.json
meta:
  name: func main()
  description: The entry point of a Go program.
  icon: play
aspects:
  - id: Start Datadog Tracer and Profiler
    join-point:
      all-of:
        - package-name: main
        - function-body:
            function:
              - name: main
              - signature: {}
    advice:
      - prepend-statements:
          imports:
            tracer: gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer
            profiler: gopkg.in/DataDog/dd-trace-go.v1/profiler
            log: log
            os: os
          template: |-
            tracer.Start(tracer.WithOrchestrion(map[string]string{"version": {{printf "%q" Version}}}))
            defer tracer.Stop()

            switch os.Getenv("DD_PROFILING_ENABLED") {
            case "1", "true", "auto":
              // The "auto" value can be set if profiling is enabled via the
              // Datadog Admission Controller. We always turn on the profiler in
              // the "auto" case since we only send profiles after at least a
              // minute, and we assume anything running that long is worth
              // profiling.
              err := profiler.Start(
                profiler.WithProfileTypes(
                  profiler.CPUProfile,
                  profiler.HeapProfile,
                  // Non-default profiles which are highly likely to be useful:
                  profiler.GoroutineProfile,
                  profiler.MutexProfile,
                ),
                profiler.WithTags("orchestrion:true"),
              )
              if err != nil {
                // TODO: is there a better reporting mechanism?
                // The tracer and profiler already use the stdlib logger, so
                // we're not adding anything new. But users might be using a
                // different logger.
                log.Printf("failed to start profiling: %s", err)
              }
              defer profiler.Stop()
            }
