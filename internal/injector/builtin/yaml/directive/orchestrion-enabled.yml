# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=../../../../../docs/static/schema.json
meta:
  name: //dd:orchestrion-enabled
  description: Flip a boolean to true if Orchestrion is enabled.
  icon: cog
  caveats: |-
    This aspect allows introducing conditional logic based on whether
    Orchestrion has been used to instrument an application or not. This should
    generally be avoided.
aspects:
  - id: Initialize to true
    tracer-internal: true # This can be safely woven in the tracer itself
    join-point:
      all-of:
        - directive: dd:orchestrion-enabled
        - value-declaration: bool
    advice:
      - assign-value:
          template: 'true'

  # TODO: This is temporary, and should be removed as soon as the fix is released.
  - id: Work around bug in dd-trace-go
    tracer-internal: true # The point of this is to fix a bug in the tracer...
    join-point:
      function-body:
        all-of:
          - import-path: gopkg.in/DataDog/dd-trace-go.v1/internal/orchestrion
          - function:
              - name: Push
              - receiver: '*gopkg.in/DataDog/dd-trace-go.v1/internal/orchestrion.contextStack'
    advice:
      - prepend-statements:
          template: |-
            {{- $recv := .Function.Receiver -}}
            if {{ $recv }} == nil {
              {{ $recv }} = getDDContextStack()
            }
            if *{{ $recv }} == nil {
              *{{ $recv }} = make(contextStack)
            }
