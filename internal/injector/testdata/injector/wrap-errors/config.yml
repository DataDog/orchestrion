# Example configuration demonstrating the desired 'wrap-errors' functionality.
# We expect returned errors are wrapped with dd-trace-go/instrumentation/errortrace
# "errors" should also include popular, third-party error libraries

%YAML 1.1
---
aspects:
  - id: "wrap-standard-errors"
    join-point:
      function-body:
        function:
          - result-implements: "error"
    advice:
      - prepend-statements:
          imports:
            errortrace: github.com/DataDog/dd-trace-go/v2/instrumentation/errortrace
          template: |-
            {{- $ret := .Function.ResultThatImplements "error" -}}
            defer func() {
              {{ $ret }} = errortrace.Wrap({{ $ret }})
            }()

syntheticReferences:
  github.com/DataDog/dd-trace-go/v2/instrumentation/errortrace: true

code: |-
  package test

  import (
    "errors"

    "go.uber.org/multierr"
    goerrors "github.com/go-errors/errors"
    "github.com/joomcode/errorx"
    "github.com/ztrue/tracerr"
    "braces.dev/errtrace"
  )

  // Returns a single error
  func withError() error {
    return errors.New("some error")
  }

  // Returns multiple values, including an error
  func withMultipleReturn() (string, error) {
    return "some string", errors.New("some error")
  }

  // No matches - doesn't return error
  func noMatch(val uint32) string {
    return ""
  }

  // uber-go/multierr =========================================================
  // Returns error from multierr
  func withMultierrInvoker() error {
    return multierr.Combine(errors.New("1"), errors.New("2"))
  }

  // Returns multiple values, including error
  func multipleWithInvoker() (string, error) {
    return "", multierr.Combine(errors.New("1"), errors.New("2"))
  }

  // go-errors/errors =========================================================
  // Returns go-errors/errors.Error
  func withGoErrorsError() error {
    return goerrors.New("goerrors")
  }

  // Returns multiple values, including goerrors.Error
  func multipleWithGoerrors() (string, error) {
    return "", goerrors.New("goerrors")
  }

  // joomcode/errorx =========================================================
  // Returns errorx.Error
  func withErrorxError() error {
    return errorx.Cast(errors.New("errorx"))
  }

  // Returns multiple values, including errorx.Error
  func multipleWithErrorx() (string, error) {
    return "", errorx.Cast(errors.New("errorx"))
  }

  // ztrue/tracerr =========================================================
  // Return tracerr.Error
  func withTracerrError() error {
    return tracerr.New("tracerr")
  }

  // Return multiple value, including tracerr.Error
  func multipleWithTracerr() (string, error) {
    return "", tracerr.New("tracerr")
  }

  // bracesdev/errtrace ========================================================
  // Return error from errtrace
  func withErrtraceWrapped() error {
    return errtrace.Wrap(errors.New("errtrace"))
  }

  // Return multiple values, including error
  func withErrtraceNew() (string, error) {
    return "", errtrace.Wrap(errors.New("errtrace"))
  }