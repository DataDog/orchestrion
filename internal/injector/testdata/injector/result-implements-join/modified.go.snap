//line input.go:1:1
package main

import (
  "bytes"
  "errors"
  "fmt"
  "io"
  "net/http" // Import a package with a type that implements error but isn't errors.New
)

// Concrete type implementing CustomReader
//
//line input.go:13
type myCustomReaderImpl struct {
  data string
}

func (cr myCustomReaderImpl) Read(p []byte) (int, error) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:18
  n := copy(p, []byte(cr.data))
  return n, io.EOF // Simplified
}

// Custom error type
type myCustomError struct {
  msg string
}

func (e myCustomError) Error() string {
  return fmt.Sprintf("custom error: %s", e.msg)
}

// Implementations

func returnsReader() io.Reader {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:34
  fmt.Println("Executing returnsReader")
  return bytes.NewBufferString("hello")
}

func returnsBuffer() *bytes.Buffer {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:39
  fmt.Println("Executing returnsBuffer")
  return bytes.NewBufferString("world")
}

func returnsError() error {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:44
  fmt.Println("Executing returnsError")
  return errors.New("standard error")
}

func returnsHttpError() error {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:49
  fmt.Println("Executing returnsHttpError")
  // http.ErrServerClosed is an error type from a different package
  return http.ErrServerClosed
}

func returnsCustomReaderImpl() myCustomReaderImpl {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:55
  fmt.Println("Executing returnsCustomReaderImpl")
  return myCustomReaderImpl{data: "custom data"}
}

func returnsCustomError() myCustomError {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:60
  fmt.Println("Executing returnsCustomError")
  return myCustomError{msg: "something went wrong"}
}

// Non-implementations

func returnsString() string {
  fmt.Println("Executing returnsString")
  return "not a reader or error"
}

func noReturn() {
  fmt.Println("Executing noReturn")
}

// Multiple return values

func returnsIntAndReader() (int, io.Reader) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:78
  fmt.Println("Executing returnsIntAndReader")
  return 1, bytes.NewBufferString("multi-return reader")
}

func returnsReaderAndInt() (io.Reader, int) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:83
  fmt.Println("Executing returnsReaderAndInt")
  return bytes.NewBufferString("multi-return reader first"), 2
}

func returnsIntAndError() (int, error) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:88
  fmt.Println("Executing returnsIntAndError")
  return 3, errors.New("multi-return error")
}

func returnsErrorAndInt() (error, int) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:93
  fmt.Println("Executing returnsErrorAndInt")
  return errors.New("multi-return error first"), 4
}

func returnsMultipleReaders() (*bytes.Buffer, io.Reader) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:98
  fmt.Println("Executing returnsMultipleReaders")
  return bytes.NewBufferString("first reader"), bytes.NewBufferString("second reader")
}

func returnsMultipleErrors() (error, error) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:103
  fmt.Println("Executing returnsMultipleErrors")
  return errors.New("first error"), fmt.Errorf("second error: %w", io.EOF)
}

func returnsStringAndInt() (string, int) {
  fmt.Println("Executing returnsStringAndInt")
  return "neither implements", 5
}

// This function has an error but it's not the final return value
// Should match ResultImplements("error") but not FinalResultImplements("error")
func returnsErrorThenString() (__result__0 error, _ string) {
//line <generated>:1
  {
    fmt.Println("Demonstrating difference between result-implements and final-result-implements:")

    fmt.Println("Success: result-implements finds error in non-final position")

    fmt.Println("Success: final-result-implements correctly ignores non-final error")
  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:115
  fmt.Println("Executing returnsErrorThenString")
  return errors.New("error in non-final position"), "final non-error value"
}

// ========== GENERIC TYPE TESTS ==========

// Generic type implementing io.Reader
type GenericBuffer[T any] struct {
  data T
}

func (gb GenericBuffer[T]) Read(p []byte) (int, error) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
  // Simplified implementation
//line input.go:128
  dataStr := fmt.Sprintf("%v", gb.data)
  n := copy(p, []byte(dataStr))
  return n, io.EOF
}

// Function returning generic type that implements io.Reader
func returnsGenericBufferString() GenericBuffer[string] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:135
  fmt.Println("Executing returnsGenericBufferString")
  return GenericBuffer[string]{data: "generic string data"}
}

func returnsGenericBufferInt() GenericBuffer[int] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:140
  fmt.Println("Executing returnsGenericBufferInt")
  return GenericBuffer[int]{data: 42}
}

// Generic error type
type GenericError[T any] struct {
  value T
  msg   string
}

func (e GenericError[T]) Error() string {
  return fmt.Sprintf("generic error: %s (value: %v)", e.msg, e.value)
}

// Functions returning generic error types
func returnsGenericErrorInt() GenericError[int] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:156
  fmt.Println("Executing returnsGenericErrorInt")
  return GenericError[int]{value: 404, msg: "not found"}
}

func returnsGenericErrorString() GenericError[string] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:161
  fmt.Println("Executing returnsGenericErrorString")
  return GenericError[string]{value: "test", msg: "test error"}
}

// Generic interface and implementation
type Processor[T any] interface {
  Process(T) error
}

type StringProcessor struct{}

func (sp StringProcessor) Process(s string) error {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:173
  fmt.Printf("Processing string: %s\n", s)
  return nil
}

// Note: This doesn't implement Processor[T] directly, but demonstrates a concrete type
func returnsStringProcessor() StringProcessor {
  fmt.Println("Executing returnsStringProcessor")
  return StringProcessor{}
}

// Multiple type parameters
type Pair[K comparable, V any] struct {
  key   K
  value V
}

// Implement error interface for Pair
func (p Pair[K, V]) Error() string {
  return fmt.Sprintf("pair error: key=%v, value=%v", p.key, p.value)
}

func returnsPairStringInt() Pair[string, int] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:195
  fmt.Println("Executing returnsPairStringInt")
  return Pair[string, int]{key: "age", value: 30}
}

// Type with constraints
type Number interface {
  ~int | ~int32 | ~int64 | ~float32 | ~float64
}

type Calculator[T Number] struct {
  value T
}

// Implement io.Reader for Calculator
func (c Calculator[T]) Read(p []byte) (int, error) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:210
  data := fmt.Sprintf("Calculator value: %v", c.value)
  n := copy(p, []byte(data))
  return n, io.EOF
}

func returnsCalculatorInt() Calculator[int] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:216
  fmt.Println("Executing returnsCalculatorInt")
  return Calculator[int]{value: 100}
}

func returnsCalculatorFloat64() Calculator[float64] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:221
  fmt.Println("Executing returnsCalculatorFloat64")
  return Calculator[float64]{value: 3.14}
}

// Generic type with pointer receiver implementing error
type GenericPointerError[T any] struct {
  data T
}

func (e *GenericPointerError[T]) Error() string {
  return fmt.Sprintf("pointer error: %v", e.data)
}

func returnsGenericPointerError() *GenericPointerError[bool] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsError implementer")

  }
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:235
  fmt.Println("Executing returnsGenericPointerError")
  return &GenericPointerError[bool]{data: true}
}

// Multiple returns with generics
func returnsIntAndGenericBuffer() (int, GenericBuffer[string]) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:241
  fmt.Println("Executing returnsIntAndGenericBuffer")
  return 42, GenericBuffer[string]{data: "multi-return generic"}
}

func returnsGenericErrorAndString() (GenericError[int], string) {
//line <generated>:1
  {
    fmt.Println("Success: instrumented returnsError implementer")

  }
//line input.go:246
  fmt.Println("Executing returnsGenericErrorAndString")
  return GenericError[int]{value: 500, msg: "server error"}, "additional info"
}

// Generic function with generic return type
func createGenericBuffer[T any](data T) GenericBuffer[T] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:252
  fmt.Printf("Executing createGenericBuffer with type %T\n", data)
  return GenericBuffer[T]{data: data}
}

// Test function that uses the generic function
func returnsGenericBufferViaGenericFunc() GenericBuffer[[]byte] {
//line <generated>:1
  {
    fmt.Println("Success: instrumented final returnsReader implementer")

  }
  {
    fmt.Println("Success: instrumented returnsReader implementer")

  }
//line input.go:258
  fmt.Println("Executing returnsGenericBufferViaGenericFunc")
  return createGenericBuffer([]byte("byte slice data"))
}

// Main - needed for compilation by the test harness.
func main() {}
