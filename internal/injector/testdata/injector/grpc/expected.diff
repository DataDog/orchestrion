--- input.go
+++ output.go
@@ -1,3 +1,4 @@
+//line input.go:1:1
 package test
 
 import (
@@ -5,11 +6,20 @@
   "net"
 
   "google.golang.org/grpc"
+//line <generated>
+  __orchestrion_grpctrace "gopkg.in/DataDog/dd-trace-go.v1/contrib/google.golang.org/grpc"
 )
 
+//line input.go:10
 func grpcClient() {
   dialOpts := []grpc.DialOption{grpc.WithInsecure()}
-  conn, err := grpc.Dial("localhost:50051", dialOpts...)
+  conn, err := grpc.Dial("localhost:50051",
+//line <generated>
+    func(opts ...grpc.DialOption) []grpc.DialOption {
+      return append(opts, grpc.WithStreamInterceptor(__orchestrion_grpctrace.StreamClientInterceptor()), grpc.WithUnaryInterceptor(__orchestrion_grpctrace.UnaryClientInterceptor()))
+    }(
+//line input.go:12
+      dialOpts...)...)
   if err != nil {
     log.Fatal(err)
   }
@@ -22,7 +28,10 @@
     log.Fatal(err)
   }
 
-  s := grpc.NewServer(grpc.EmptyServerOption{})
+  s := grpc.NewServer(grpc.EmptyServerOption{},
+//line <generated>
+    grpc.StreamInterceptor(__orchestrion_grpctrace.StreamServerInterceptor()), grpc.UnaryInterceptor(__orchestrion_grpctrace.UnaryServerInterceptor()))
+//line input.go:26
   if err := s.Serve(ln); err != nil {
     log.Fatalf("failed to serve: %v", err)
   }
