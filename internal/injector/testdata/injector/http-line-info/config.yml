%YAML 1.1
---
aspects:
  - join-point:
      function-body:
        function:
          - signature:
              args:
                - 'net/http.ResponseWriter'
                - '*net/http.Request'
    advice:
      - prepend-statements:
          imports:
            event: github.com/DataDog/orchestrion/instrument/event
            instrument: github.com/DataDog/orchestrion/instrument
          template: |-
            {{- $arg := .Function.Argument 1 -}}
            {{- $name := .Function.Name -}}
            {{$arg}} = {{$arg}}.WithContext(instrument.Report(
              {{$arg}}.Context(),
              event.EventStart,
              {{with $name}}"function-name", {{printf "%q" .}},{{end}}
              "span.kind", "server",
              "http.method", {{$arg}}.Method,
              "http.url", {{$arg}}.URL,
              "http.useragent", {{$arg}}.Header.Get("User-Agent"),
              {{ range .DirectiveArgs "dd:span" -}}{{printf "%q, %q,\n" .Key .Value}}{{ end }}
            ))
            defer instrument.Report(
              {{$arg}}.Context(),
              event.EventEnd,
              {{with $name}}"function-name", {{printf "%q" .}},{{end}}
              "span.kind", "server",
              "http.method", {{$arg}}.Method,
              "http.url", {{$arg}}.URL,
              "http.useragent", {{$arg}}.Header.Get("User-Agent"),
              {{ range .DirectiveArgs "dd:span" -}}{{printf "%q, %q," .Key .Value}}{{- end }}
            )

syntheticReferences:
  github.com/DataDog/orchestrion/instrument/event: true
  github.com/DataDog/orchestrion/instrument: true

code: |-
  package main

  import (
    "io"
    "log"
    "net/http"
  )

  func main() {
    s := &http.Server{
      Addr:    ":8085",
      Handler: http.HandlerFunc(handle),
    }
    log.Printf("Server shut down: %v", s.ListenAndServe())
  }

  func handle(w http.ResponseWriter, r *http.Request) {
    data, err := io.ReadAll(r.Body)
    if err != nil {
      w.WriteHeader(http.StatusBadRequest)
      w.Write([]byte(err.Error()))
      return
    }
    defer r.Body.Close()
    w.WriteHeader(http.StatusOK)
    w.Write(data)
  }
