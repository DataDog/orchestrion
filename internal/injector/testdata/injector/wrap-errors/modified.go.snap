//line input.go:1:1
package test

import (
  "errors"

  "braces.dev/errtrace"
  goerrors "github.com/go-errors/errors"
  "github.com/joomcode/errorx"
  "github.com/ztrue/tracerr"
  "go.uber.org/multierr"
//line <generated>:1
  __orchestrion_errortrace "github.com/DataDog/dd-trace-go/v2/instrumentation/errortrace"
)

// Returns a single error
//
//line input.go:14
func withError() (__result__0 error) {
//line <generated>:1
  {
    __result__0 = __orchestrion_errortrace.Wrap(__result__0)
  }
//line input.go:15
  return errors.New("some error")
}

// Returns multiple values, including an error
func withMultipleReturn() (_ string, __result__1 error) {
//line <generated>:1
  {
    __result__1 = __orchestrion_errortrace.Wrap(__result__1)
  }
//line input.go:20
  return "some string", errors.New("some error")
}

// No matches - doesn't return error
func noMatch(val uint32) string {
  return ""
}

// uber-go/multierr =========================================================
// Returns error from multierr
func withMultierrInvoker() (__result__0 error) {
//line <generated>:1
  {
    __result__0 = __orchestrion_errortrace.Wrap(__result__0)
  }
//line input.go:31
  return multierr.Combine(errors.New("1"), errors.New("2"))
}

// Returns multiple values, including error
func multipleWithInvoker() (_ string, __result__1 error) {
//line <generated>:1
  {
    __result__1 = __orchestrion_errortrace.Wrap(__result__1)
  }
//line input.go:36
  return "", multierr.Combine(errors.New("1"), errors.New("2"))
}

// go-errors/errors =========================================================
// Returns go-errors/errors.Error
func withGoErrorsError() (__result__0 *goerrors.Error) {
//line <generated>:1
  {
    __result__0 = __orchestrion_errortrace.Wrap(__result__0)
  }
//line input.go:42
  return goerrors.New("goerrors")
}

// Returns multiple values, including goerrors.Error
func multipleWithGoerrors() (_ string, __result__1 *goerrors.Error) {
//line <generated>:1
  {
    __result__1 = __orchestrion_errortrace.Wrap(__result__1)
  }
//line input.go:47
  return "", goerrors.New("goerrors")
}

// joomcode/errorx =========================================================
// Returns errorx.Error
func withErrorxError() (__result__0 *errorx.Error) {
//line <generated>:1
  {
    __result__0 = __orchestrion_errortrace.Wrap(__result__0)
  }
//line input.go:53
  return errorx.Cast(errors.New("errorx"))
}

// Returns multiple values, including errorx.Error
func multipleWithErrorx() (_ string, __result__1 *errorx.Error) {
//line <generated>:1
  {
    __result__1 = __orchestrion_errortrace.Wrap(__result__1)
  }
//line input.go:58
  return "", errorx.Cast(errors.New("errorx"))
}

// ztrue/tracerr =========================================================
// Return tracerr.Error
func withTracerrError() (__result__0 tracerr.Error) {
//line <generated>:1
  {
    __result__0 = __orchestrion_errortrace.Wrap(__result__0)
  }
//line input.go:64
  return tracerr.New("tracerr")
}

// Return multiple value, including tracerr.Error
func multipleWithTracerr() (_ string, __result__1 tracerr.Error) {
//line <generated>:1
  {
    __result__1 = __orchestrion_errortrace.Wrap(__result__1)
  }
//line input.go:69
  return "", tracerr.New("tracerr")
}

// bracesdev/errtrace ========================================================
// Return error from errtrace
func withErrtraceWrapped() (__result__0 error) {
//line <generated>:1
  {
    __result__0 = __orchestrion_errortrace.Wrap(__result__0)
  }
//line input.go:75
  return errtrace.Wrap(errors.New("errtrace"))
}

// Return multiple values, including error
func withErrtraceNew() (_ string, __result__1 error) {
//line <generated>:1
  {
    __result__1 = __orchestrion_errortrace.Wrap(__result__1)
  }
//line input.go:80
  return "", errtrace.Wrap(errors.New("errtrace"))
}
