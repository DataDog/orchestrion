// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
	"fmt"
	"log"
	"os"
	"slices"
	"strings"

	"github.com/dave/jennifer/jen"
)

func main() {
	file := jen.NewFile("tests")
	file.HeaderComment("Unless explicitly stated otherwise all files in this repository are licensed")
	file.HeaderComment("under the Apache License Version 2.0.")
	file.HeaderComment("This product includes software developed at Datadog (https://www.datadoghq.com/).")
	file.HeaderComment("Copyright 2023-present Datadog, Inc.")
	file.HeaderComment("")
	file.HeaderComment(fmt.Sprintf("Code generated by 'go generate'; DO NOT EDIT."))

	entries, err := os.ReadDir(".")
	if err != nil {
		log.Fatalf("failed listing directory: %v\n", err)
	}
	// Ensure stable ordering by explicitly sorting...
	slices.SortFunc(entries, func(lhs, rhs os.DirEntry) int {
		return strings.Compare(lhs.Name(), rhs.Name())
	})

	file.Var().Id("suite").Op("=").Map(jen.String()).Id("testCase").ValuesFunc(func(g *jen.Group) {
		for _, entry := range entries {
			if !entry.IsDir() {
				continue
			}
			g.Line().Lit(entry.Name()).Op(":").New(jen.Qual(fmt.Sprintf("orchestrion/integration/tests/%s", entry.Name()), "TestCase"))
		}
		g.Line().Empty()
	})

	if err := file.Save("suite.generated.go"); err != nil {
		log.Fatalf("failed writing file: %v\n", err)
	}
}
